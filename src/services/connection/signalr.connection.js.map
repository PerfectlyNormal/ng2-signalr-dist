{"version":3,"file":"signalr.connection.js","sourceRoot":"","sources":["../../../../src/services/connection/signalr.connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './i.signalr.connection';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from './connection.status';\r\nimport { NgZone } from '@angular/core';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { ConnectionTransport } from './connection.transport';\r\nimport { HubConnection, LogLevel } from '@aspnet/signalr';\r\nimport { ConnectionStatuses } from './connection.statuses';\r\n\r\nexport declare type CallbackFn = (...args: any[]) => void;\r\n\r\nexport class SignalRConnection implements ISignalRConnection {\r\n    private _status: Subject<ConnectionStatus>;\r\n    private _errors: Subject<any>;\r\n    private _jConnection: HubConnection;\r\n    private _zone: NgZone;\r\n    private _configuration: SignalRConfiguration;\r\n    private _listeners: { [eventName: string]: CallbackFn[] };\r\n\r\n    constructor(jConnection: HubConnection, zone: NgZone, configuration: SignalRConfiguration) {\r\n        this._jConnection = jConnection;\r\n        this._zone = zone;\r\n        this._errors = new Subject<any>();\r\n        this._status = this.wireUpStatusEventsAsObservable();\r\n        this._configuration = configuration;\r\n        this._listeners = {};\r\n    }\r\n\r\n    public get errors(): Observable<any> {\r\n        return this._errors;\r\n    }\r\n\r\n    public get status(): Observable<ConnectionStatus> {\r\n        return this._status;\r\n    }\r\n\r\n    public start(): Promise<ISignalRConnection> {\r\n        this._status.next(ConnectionStatuses.connecting);\r\n\r\n        const $promise = new Promise<ISignalRConnection>((resolve, reject) => {\r\n            this._jConnection\r\n                .start()\r\n                .then(() => {\r\n                    this._status.next(ConnectionStatuses.connected);\r\n                    resolve(this);\r\n                })\r\n                .catch((error: any) => {\r\n                    this._status.next(ConnectionStatuses.disconnected);\r\n                    this.run(() => this._errors.next(error), this._configuration.executeErrorsInZone);\r\n                    reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                });\r\n        });\r\n\r\n        return $promise;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._status.next(ConnectionStatuses.disconnected);\r\n        this._jConnection.stop();\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        if (method == null) {\r\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\r\n        }\r\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\r\n\r\n        const $promise = new Promise<any>((resolve, reject) => {\r\n            this._jConnection.invoke(method, ...parameters)\r\n                .then((result: any) => {\r\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\r\n                    resolve(result);\r\n                    this.log(`Promise resolved.`);\r\n                })\r\n                .catch((err: any) => {\r\n                    console.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\r\n                    reject(err);\r\n                    console.log(`Promise rejected.`);\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: T = null;\r\n                if (args.length > 0) {\r\n                    casted = args[0] as T;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(casted);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n    }\r\n\r\n    public stopListening<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);\r\n        if (!this._listeners[listener.event]) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        for (const callback of this._listeners[listener.event]) {\r\n            this._jConnection.off(listener.event, callback);\r\n        }\r\n\r\n        this._listeners[listener.event] = [];\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<T>(event);\r\n\r\n        this.listen(listener);\r\n\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: any[] = [];\r\n                if (args.length > 0) {\r\n                    casted = args;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(args);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n        return listener;\r\n    }\r\n\r\n    private setListener<T>(callback: CallbackFn, listener: BroadcastEventListener<T>) {\r\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\r\n        this._jConnection.on(listener.event, callback);\r\n\r\n        if (this._listeners[listener.event] == null) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        this._listeners[listener.event].push(callback);\r\n    }\r\n\r\n    private convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\r\n        if (transports instanceof Array) {\r\n            return transports.map((t: ConnectionTransport) => t.name);\r\n        }\r\n        return transports.name;\r\n    }\r\n\r\n    private wireUpStatusEventsAsObservable(): Subject<ConnectionStatus> {\r\n        const sStatus = new Subject<ConnectionStatus>();\r\n\r\n        // aggregate all signalr connection status handlers into 1 observable.\r\n        // handler wire up, for signalr connection status callback.\r\n        this._jConnection.onclose((change: any) => {\r\n            this.run(() => {\r\n                let connectionStatus: ConnectionStatus = null;\r\n\r\n                if (change && change.hasOwnProperty('newState')) {\r\n                    connectionStatus = new ConnectionStatus(change.newState);\r\n                } else if (!change || change.hasOwnProperty('message')) { // Probably an error\r\n                    connectionStatus = ConnectionStatuses.disconnected;\r\n                }\r\n\r\n                sStatus.next(connectionStatus);\r\n            }, this._configuration.executeStatusChangeInZone);\r\n        });\r\n\r\n        return sStatus;\r\n    }\r\n\r\n    private onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\r\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n\r\n        let casted: T = null;\r\n        if (args.length > 0) {\r\n            casted = args[0] as T;\r\n        }\r\n\r\n        this.run(() => {\r\n            listener.next(casted);\r\n        }, this._configuration.executeEventsInZone);\r\n\r\n        this.log('listener next() called.');\r\n    }\r\n\r\n    private log(...args: any[]) {\r\n        if (this._configuration.logging === LogLevel.None) {\r\n            return;\r\n        }\r\n        console.log(args.join(', '));\r\n    }\r\n\r\n    private run(func: () => void, inZone: boolean) {\r\n        if (inZone) {\r\n            this._zone.run(() => func());\r\n        } else {\r\n            this._zone.runOutsideAngular(() => func());\r\n        }\r\n    }\r\n}\r\n"]}