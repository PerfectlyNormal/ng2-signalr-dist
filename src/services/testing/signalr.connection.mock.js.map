{"version":3,"file":"signalr.connection.mock.js","sourceRoot":"","sources":["../../../../src/services/testing/signalr.connection.mock.ts"],"names":[],"mappings":";;;;AAEA,OAAO,EAAE,sBAAsB,EAAE,MAAM,sCAAsC,CAAC;;;;AAI9E,yCAEC;AAED,MAAM,OAAO,qBAAqB;;;;;;IAC9B,YACY,YAA0B,EAC1B,YAAuC,EACvC,UAA+B;QAF/B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,iBAAY,GAAZ,YAAY,CAA2B;QACvC,eAAU,GAAV,UAAU,CAAqB;IAC3C,CAAC;;;;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;;;;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC5C,CAAC;;;;IAED,IAAI,EAAE;QACF,OAAO,8BAA8B,CAAC;IAC1C,CAAC;;;;IAEM,IAAI;QACP,EAAE;IACN,CAAC;;;;IAEM,KAAK;QACR,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB;IACpD,CAAC;;;;;;IAEM,MAAM,CAAC,MAAc,EAAE,GAAG,UAAiB;QAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;;;;;;IAEM,MAAM,CAAI,QAAmC;QAChD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC/C,CAAC;;;;;;IAEM,SAAS,CAAI,KAAa;;cACvB,QAAQ,GAAG,IAAI,sBAAsB,CAAI,KAAK,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,QAAQ,CAAC;IACpB,CAAC;;;;;IAEM,YAAY,CAAC,KAAa;;cACvB,QAAQ,GAAG,IAAI,sBAAsB,CAAQ,KAAK,CAAC;QACzD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAC3C,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;;;;;;IA5CO,6CAAkC;;;;;IAClC,6CAA+C;;;;;IAC/C,2CAAuC","sourcesContent":["import { Observable, AsyncSubject, ReplaySubject, Subject } from 'rxjs';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\nimport { ISignalRConnection } from '../connection/i.signalr.connection';\r\n\r\nexport interface IListenerCollection {\r\n    [name: string]: BroadcastEventListener<any>;\r\n}\r\n\r\nexport class SignalRConnectionMock implements ISignalRConnection {\r\n    constructor(\r\n        private _mockErrors$: Subject<any>,\r\n        private _mockStatus$: Subject<ConnectionStatus>,\r\n        private _listeners: IListenerCollection) {\r\n    }\r\n\r\n    get errors(): Observable<any> {\r\n        return this._mockErrors$;\r\n    }\r\n\r\n    get status(): Observable<ConnectionStatus> {\r\n        return this._mockStatus$.asObservable();\r\n    }\r\n\r\n    get id(): string {\r\n        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';\r\n    }\r\n\r\n    public stop(): void {\r\n        //\r\n    }\r\n\r\n    public start(): Promise<any> {\r\n        return Promise.resolve(null); // TODO: implement\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        this._listeners[listener.event] = listener;\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        const listener = new BroadcastEventListener<T>(event);\r\n        this.listen(listener);\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n        this._listeners[listener.event] = listener;\r\n        return listener;\r\n    }\r\n}\r\n"]}